
name: Deploy

on:
  push:
    branches:
      - main  # Change if using a different branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
    
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY_B64 }}" | base64 -d > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ls -lah ~/.ssh
          ssh-keyscan -H 13.41.185.213 >> ~/.ssh/known_hosts

      # - name: Deploy to EC2
      #   run: |
      #     ssh ubuntu@13.41.185.213 << 'EOF'
      #       # Go to app directory or create it if it doesn't exist
      #       cd ~/app || mkdir -p ~/app && cd ~/app
            
      #       # If repo doesn't exist, clone it; otherwise, pull latest changes
      #       if [ ! -d "lft-barebones" ]; then
      #         git clone https://github.com/pgmoir/lft-barebones
      #       fi
            
      #       cd lft-barebones
      #       git pull
            
      #       # Install dependencies
      #       npm install
            
      #       # Restart app using PM2
      #       pm2 stop all || true
      #       pm2 start server.js --name "node-app"
      #       pm2 save
      #     EOF

      - name: Deploy to EC2
        run: |
          # Decode the base64-encoded private key and save it to a file
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY_B64 }}" | base64 --decode > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa  # Set the correct permissions for the private key
      
          # Copy files from the runner to the EC2 instance using scp
          # rsync -avz -e "ssh -i ~/.ssh/id_rsa" ./ ubuntu@13.41.185.213:/home/ubuntu/app
          # scp -i ~/.ssh/id_rsa -r ./ ubuntu@13.41.185.213:/home/ubuntu/app
          echo "Copying files to EC2... app"
          scp -i ~/.ssh/id_rsa ./app.js ubuntu@13.41.185.213:/home/ubuntu/app/
          echo "Copying files to EC2... package.json"
          scp -i ~/.ssh/id_rsa ./package.json ubuntu@13.41.185.213:/home/ubuntu/app/
          echo "Copying files to EC2... views"
          rsync -avz --delete -e "ssh -i ~/.ssh/id_rsa" ./views/ ubuntu@13.41.185.213:/home/ubuntu/app/views/
          # echo "Copying files to EC2... util"
          rsync -avz --delete -e "ssh -i ~/.ssh/id_rsa" ./util/ ubuntu@13.41.185.213:/home/ubuntu/app/util/
          # echo "Copying files to EC2... routes"
          rsync -avz --delete -e "ssh -i ~/.ssh/id_rsa" ./routes/ ubuntu@13.41.185.213:/home/ubuntu/app/routes/
          # echo "Copying files to EC2... public"
          rsync -avz --delete -e "ssh -i ~/.ssh/id_rsa" ./public/ ubuntu@13.41.185.213:/home/ubuntu/app/public/
          # echo "Copying files to EC2... models"
          rsync -avz --delete -e "ssh -i ~/.ssh/id_rsa" ./models/ ubuntu@13.41.185.213:/home/ubuntu/app/models/
          # echo "Copying files to EC2... middleware"
          rsync -avz --delete -e "ssh -i ~/.ssh/id_rsa" ./middleware/ ubuntu@13.41.185.213:/home/ubuntu/app/middleware/
          # echo "Copying files to EC2... helpers"
          rsync -avz --delete -e "ssh -i ~/.ssh/id_rsa" ./helpers/ ubuntu@13.41.185.213:/home/ubuntu/app/helpers/
          # echo "Copying files to EC2... feeds"
          rsync -avz --delete -e "ssh -i ~/.ssh/id_rsa" ./feeds/ ubuntu@13.41.185.213:/home/ubuntu/app/feeds/
          # echo "Copying files to EC2... controllers"
          rsync -avz --delete -e "ssh -i ~/.ssh/id_rsa" ./controllers/ ubuntu@13.41.185.213:/home/ubuntu/app/controllers/
          
          # echo "Create .env file"
          ssh -i ~/.ssh/id_rsa ubuntu@13.41.185.213 << 'EOF'
            cd /home/ubuntu/app
            echo "PORT=3000" > .env
            echo "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" >> .env
            echo "MONGODB_URL=${{ secrets.MONGODB_URL }}" >> .env
            echo "NODE_ENV=production" >> .env
          EOF
          # echo "Created .env file"

          # Install dependencies and restart app on EC2 instance
          echo "Installing dependencies..."
          ssh -i ~/.ssh/id_rsa ubuntu@13.41.185.213 << 'EOF'
            cd /home/ubuntu/app
            npm install
            pm2 stop all || true
            pm2 start app.js --name "node-app"
            pm2 save
          EOF
        env:
          SSH_PRIVATE_KEY: ${{ secrets.AWS_SSH_PRIVATE_KEY_B64 }}
        
